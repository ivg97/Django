from django.shortcuts import render, get_object_or_404
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from .models import Post
from django.views.generic import ListView
from .forms import EmailPostForm
from django.core.mail import send_mail


class PostListView(ListView):
    queryset = Post.published.all()
    context_object_name = 'posts'
    paginate_by = 3
    template_name = 'blog/post/list.html'


def post_list(request):
    '''
    Обработчик отображения списка статей.
     Получает объекты request в качестве обязательного аргумента.
    Запрашиваем из БД все опубликованные статьи  спомощью нашего
    менеджера published.
    render - формирует шаблон со списком статей. В ответ возвращается
    объект HttpResponse c HTML кодом. Render передает переданную ей
    переменные в контекст шаблона. Поэтому все переменные работают в шаблоне.
    '''
    object_list = Post.published.all().filter(status='published')
    paginator = Paginator(object_list, 3) # По три статьи на странице
    page = request.GET.get('page')
    # print(page)
    try:
        posts = paginator.page(page)
    except PageNotAnInteger:
        # Если страница не является целым числом ,
        # возвращаем первую страницу
        posts = paginator.page(1)
    except EmptyPage:
        # Если страница не является больше, чем общее количество страниц,
        # возвращаем последнюю
        posts = paginator.page(paginator.num_pages)
    # posts = Post.published.all()
    return render(request,
                  'blog/post/list.html',
                  {'page': page,
                   'posts': posts,})

def post_detail(request, year, month, day, post):
    '''
    Обработчик страницы статьи.
    Принмает аргументы для вывода статьи по указанным слагу и дате.
    В модели Post, у поля slug указан атрибут unique_for_date.
    Т е ограничение что б slug был уникальным.

    Используем get_object_or_404 для поиска нужной статьи. Она возвращает
    объект подходящий по параметрам или вызывает 404.
    '''

    post = get_object_or_404(Post, slug=post,
                             status='published',
                             publish__year=year,
                             publish__month=month,
                             publish__day=day,)

    return render(request, 'blog/post/detail.html', {'post': post})

def post_share(request, post_id):
    '''получение статьи по идентификатору'''
    '''Принимает объект запроса request и post_id'''

    # вызываем get_object_or_404() для получения статьи с указанным
    # идентификатором. Убеждаемся что статьи опубликована
    post = get_object_or_404(Post, id=post_id, status='published')
    # sent  после отправки сообщения устанавливается в True
    # Используем для отображения сообщения об успешной отправке
    # в html шаблоне
    sent = False

    if request.method == 'GET':
        # Если пользователь заполнил форму и отправляет POST-запросом.
        # Создаем объект формы, использую полученные из request.POST данные
        # форма была отправлена на сохранение
        form = EmailPostForm(request.POST)
        print('#' * 70)
        print(EmailPostForm(request.POST))
        print('#' *)

        if form.is_valid():

            # Выполняем проверку введенных данных с пом is_valid()
            # Он валидирует все описанные поля формы и возвращает True, если
            # не найдено ошибок, иначе False. Список полей с ошибками смотрим
            # в form.errors
            # все поля формы прошли валидацию, получаем введенные данные
            # с помощью form.cleaned_data. Этот атрибут является словарем с полями формы
            # и их значениями
            # Если форма не проходит валидащцию, то в cleaned_data попадут только
            # корректные поля
            cd = form.cleaned_data

            # Отправка электронной почты
            post_url = request.build_absolute_uri(post.get_absolute_url())
            
            subject = '{} ({}) recommends you reading "{}"'.format(cd['name'],
                                                               cd['email'],
                                                               post.title)
            message = 'Read "{}" at {}\n\n{}\'s comments: {}'.format(post.title,
                                                                 post_url,
                                                                 cd['name'],
                                                                 cd['comments'])
            send_mail(subject, message, 'admin@myblog.com', [cd['to']])
            sent = True
        else:
            # когда обработчик выполняется первый раз с GET-запросом, создаем
            # объект form, который будет отображен в шаблоне как пустая форма
            form = EmailPostForm()

            # Если форма с ошибками, возвращаем ее с введенными пользователем
            # данными в html шаблон
            return render(request,
                      'blog/post/share.html',
                      {'post' : post, 'form': form,
                       'sent': sent})




# Create your views here.
